{"version":3,"sources":["d3-force/d3-nyt.js"],"names":["margin","width","height","svg","d3","select","append","attr","xPositionScale","scaleLinear","domain","range","clamp","colorScale","scaleThreshold","reverse","sectors","yPositionScale","scalePoint","radiusScale","scaleSqrt","forceX","d","taxes","earnings","strength","forceYSplit","forceY","sector","forceYCombined","forceCollide","capitalization","simulation","forceSimulation","force","tsv","then","ready","datapoints","console","log","forEach","x","y","selectAll","data","join","text","on","alpha","alphaTarget","restart","transition","style","nodes","ticked"],"mappings":";CAAA,WAGQA,IAAAA,EAAgB,GAAhBA,EAA2B,GAA3BA,EAAuC,GAAvCA,EAAiD,IAEjDC,EAAQ,IAAMD,EAAcA,EAC5BE,EAAS,KAAOF,EAAaA,EAG7BG,EAAMC,GAAGC,OAAO,UAAUC,OAAO,OAClCC,KAAK,QAASN,EAAQD,EAAcA,GACpCO,KAAK,SAAUL,EAASF,EAAaA,GACrCM,OAAO,KACPC,KAAK,YAAa,aAAeP,EAAc,IAAMA,EAAa,KAEjEQ,EAAiBJ,GAAGK,cACvBC,OAAO,CAAC,EAAG,KACXC,MAAM,CAAC,EAAGV,IACVW,OAAM,GAEHC,EAAaT,GAAGU,iBACnBJ,OAAO,CAAC,GAAI,GAAI,GAAI,GAAI,KACxBC,MAAM,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,WAAWI,WAEtEC,EAAU,CAAC,YAAa,yBAA0B,cAAe,UAAW,cAAe,SAAU,oBAAqB,YAAa,aAAc,YAAa,SAAU,aAE5KC,EAAiBb,GAAGc,aACvBR,OAAOM,GACPL,MAAM,CAAC,EAAGT,IAEPiB,EAAcf,GAAGgB,YACpBV,OAAO,CAAC,EAAG,MACXC,MAAM,CAAC,EAAG,KAKPU,EAASjB,GAAGiB,OAAO,SAAAC,GAAKd,OAAAA,EAAec,EAAEC,MAAQD,EAAEE,YAAWC,SAAS,GACvEC,EAActB,GAAGuB,OAAO,SAAAL,GAAKL,OAAAA,EAAeK,EAAEM,UAC9CC,EAAiBzB,GAAGuB,OAAOzB,EAAS,GACpC4B,EAAe1B,GAAG0B,aAAa,SAAAR,GAAKH,OAAAA,EAAYG,EAAES,gBAAkB,IAEpEC,EAAa5B,GAAG6B,kBACnBC,MAAM,UAAWJ,GACjBI,MAAM,IAAKR,GACXQ,MAAM,IAAKb,GAEdjB,GAAG+B,IAAI,iBACJC,KAEMC,SAAOC,GACdC,QAAQC,IAAI,gBAEZF,EAAWG,QAAQ,SAAAnB,GACjBA,EAAEoB,EAAIlC,EAAec,EAAEC,MAAQD,EAAEE,UACjCF,EAAEqB,EAAIzC,EAAS,IAiBjBC,EAAIyC,UAAU,QACXC,KAAK7B,GACL8B,KAAK,QACLvC,KAAK,cAAe,OACpBA,KAAK,IAAK,SAAAe,GAAKL,OAAAA,EAAeK,KAC9Bf,KAAK,MAAO,IACZwC,KAAK,SAAAzB,GAAKA,OAAAA,IAEbnB,EAAIyC,UAAU,UACXC,KAAKP,GACLQ,KAAK,UACLvC,KAAK,IAAK,SAAAe,GAAKH,OAAAA,EAAYG,EAAES,kBAC7BxB,KAAK,KAAM,SAAAe,GAAKd,OAAAA,EAAec,EAAEC,MAAQD,EAAEE,YAC3CjB,KAAK,OAAQ,SAAAe,GAAKT,OAAAA,EAAWS,EAAEC,MAAQD,EAAEE,YACzCjB,KAAK,KAAM,SAAAe,GAAKL,OAAAA,EAAeK,EAAEM,UACjCrB,KAAK,SAAU,WAGlBH,GAAGC,OAAO,aACP2C,GAAG,QAAS,WAGXhB,EAAWE,MAAM,IAAKL,GAGtBG,EACGiB,MAAM,IACNC,YAAY,IACZC,UAEHhD,EAAIyC,UAAU,QACXQ,aACAC,MAAM,UAAW,KAGtBjD,GAAGC,OAAO,YACP2C,GAAG,QAAS,WAGXhB,EAAWE,MAAM,IAAKR,GAGtBM,EACGiB,MAAM,IACNC,YAAY,IACZC,UAEDhD,EAAIyC,UAAU,QACbQ,aACAC,MAAM,UAAW,KAI1BrB,EAAWsB,MAAMhB,GACdU,GAAG,OAEGO,WACPhB,QAAQC,IAAI,kBAEZrC,EAAIyC,UAAU,UACXrC,KAAK,KAAM,SAAAe,GAAKA,OAAAA,EAAEoB,IAClBnC,KAAK,KAAM,SAAAe,GAAKA,OAAAA,EAAEqB,QArI3B","file":"d3-nyt.85608b55.js","sourceRoot":"../content","sourcesContent":["(function () {\n\n  // Margin convention\n  const margin = { top: 40, right: 30, bottom: 20, left: 200 }\n\n  const width = 700 - margin.left - margin.right\n  const height = 1500 - margin.top - margin.bottom\n\n  // You'll probably need to edit this one\n  const svg = d3.select(\"#chart\").append(\"svg\")\n      .attr(\"width\", width + margin.left + margin.right)\n      .attr(\"height\", height + margin.top + margin.bottom)\n      .append(\"g\")\n      .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\")\n\n  const xPositionScale = d3.scaleLinear()\n    .domain([0, 0.6])\n    .range([0, width])\n    .clamp(true)\n  \n  const colorScale = d3.scaleThreshold()\n    .domain([.1, .2, .3, .4, .5])\n    .range([\"#b35806\", \"#f1a340\", \"#fee0b6\", \"#d8daeb\", \"#998ec3\", \"#542788\"].reverse())\n\n  const sectors = [\"Utilities\", \"Information technology\", \"Industrials\", \"Telecom\", \"Health care\", \"Pharma\", \"Consumer products\", \"Materials\", \"Financials\", \"Retailers\", \"Energy\", \"Insurance\"]\n\n  const yPositionScale = d3.scalePoint()\n    .domain(sectors)\n    .range([0, height])\n\n  const radiusScale = d3.scaleSqrt()\n    .domain([0, 100000])\n    .range([0, 10])\n\n  // hey!!\n  // let's simulate how these datapoints interact\n  // and we'll make sure they don't overlap\n  const forceX = d3.forceX(d => xPositionScale(d.taxes / d.earnings)).strength(2)\n  const forceYSplit = d3.forceY(d => yPositionScale(d.sector))\n  const forceYCombined = d3.forceY(height / 2)\n  const forceCollide = d3.forceCollide(d => radiusScale(d.capitalization) + 1)\n\n  const simulation = d3.forceSimulation()\n    .force(\"overlap\", forceCollide)\n    .force(\"y\", forceYSplit)\n    .force(\"x\", forceX)\n\n  d3.tsv(\"companies.tsv\")\n    .then(ready)\n\n  function ready (datapoints) {\n    console.log(\"I'm here!!!!\")\n\n    datapoints.forEach(d => {\n      d.x = xPositionScale(d.taxes / d.earnings);\n      d.y = height / 2;\n    })\n    // cx\n    // cy\n    // capitalization\n    // earnings\n    // taxes <------\n    // x\n    // y\n    // sector\n    // name\n    // alias\n    // symbol\n\n    // Put a text element for every single sector\n    // And space them out on the y axis according to the scale\n\n    svg.selectAll('text')\n      .data(sectors)\n      .join('text')\n      .attr('text-anchor', 'end')\n      .attr('y', d => yPositionScale(d))\n      .attr('dx', -10)\n      .text(d => d)\n\n    svg.selectAll('circle')\n      .data(datapoints)\n      .join('circle')\n      .attr('r', d => radiusScale(d.capitalization))\n      .attr('cx', d => xPositionScale(d.taxes / d.earnings))\n      .attr('fill', d => colorScale(d.taxes / d.earnings))\n      .attr('cy', d => yPositionScale(d.sector))\n      .attr('stroke', '#333333')\n      // set the cx based on your new scale and the taxes column\n\n    d3.select(\"#combined\")\n      .on('click', function () {\n        // Substitute forceYCombined as our y force\n        // instead of whatever was there before\n        simulation.force(\"y\", forceYCombined)\n\n        // reheat the simulation (restart it)\n        simulation\n          .alpha(0.1)\n          .alphaTarget(0.1)\n          .restart();\n\n        svg.selectAll(\"text\")\n          .transition()\n          .style('opacity', 0)\n      })\n\n      d3.select(\"#sectors\")\n        .on('click', function () {\n          // Substitute forceYCombined as our y force\n          // instead of whatever was there before\n          simulation.force(\"y\", forceYSplit)\n\n          // reheat the simulation (restart it)\n          simulation\n            .alpha(0.1)\n            .alphaTarget(0.1)\n            .restart();\n\n            svg.selectAll(\"text\")\n            .transition()\n            .style('opacity', 1)\n          })\n\n\n    simulation.nodes(datapoints)\n      .on('tick', ticked)\n\n    function ticked() {\n      console.log(\"tick tick tick\")\n\n      svg.selectAll('circle')\n        .attr(\"cx\", d => d.x)\n        .attr(\"cy\", d => d.y)\n\n    }\n  }\n})();"]}